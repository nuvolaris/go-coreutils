// +build ignore

package uname

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

// globs are stolen from GNU coreutils' host-os.m4 file.
// see GNU-LICENSE.txt
var globs = map[string]string{
	"winnt*":        "Windows NT",
	"vos*":          "VOS",
	"sysv*":         "Unix System V",
	"superux*":      "SUPER-UX",
	"sunos*":        "SunOS",
	"stop*":         "STOP",
	"sco*":          "SCO Unix",
	"riscos*":       "RISC OS",
	"riscix*":       "RISCiX",
	"qnx*":          "QNX",
	"pw32*":         "PW32",
	"ptx*":          "ptx",
	"plan9*":        "Plan 9",
	"osf*":          "Tru64",
	"os2*":          "OS/2",
	"openbsd*":      "OpenBSD",
	"nsk*":          "NonStop Kernel",
	"nonstopux*":    "NonStop-UX",
	"netbsd*-gnu*":  "GNU/NetBSD",
	"netbsd*":       "NetBSD",
	"mirbsd*":       "MirBSD",
	"knetbsd*-gnu":  "GNU/kNetBSD",
	"kfreebsd*-gnu": "GNU/kFreeBSD",
	"msdosdjgpp*":   "DJGPP",
	"mpeix*":        "MPE/iX",
	"mint*":         "MiNT",
	"mingw*":        "MinGW",
	"lynxos*":       "LynxOS",
	"linux*":        "GNU/Linux",
	"hpux*":         "HP-UX",
	"hiux*":         "HI-UX",
	"gnu*":          "GNU",
	"freebsd*":      "FreeBSD",
	"dgux*":         "DG/UX",
	"bsdi*":         "BSD/OS",
	"bsd*":          "BSD",
	"beos*":         "BeOS",
	"aux*":          "A/UX",
	"atheos*":       "AtheOS",
	"amigaos*":      "Amiga OS",
	"aix*":          "AIX",
}

func match(pattern, name string) bool {
	ok, err := filepath.Match(pattern, name)
	return ok && err == nil
}

func main() {
	const pkg = "main"

	// Shell locals...
	out, err := exec.Command("sh", "-c", "echo $OSTYPE").Output()
	if err != nil {
		panic(err)
	}

	if len(out) > 0 && out[len(out)-1] == '\n' {
		out = out[:len(out)-1]
	}

	file, err := os.Create("host_os.go")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	rawHostOS := string(out)

	fmt.Fprintln(file, "// +build ostypes")
	fmt.Fprintf(file, "// generated by ostypes. DO NOT EDIT.\n\n")
	fmt.Fprintf(file, "package %s\n\nconst hostOS = ", pkg)

	// This is what uname does.
	if rawHostOS == "" {
		fmt.Fprintf(file, "%q\n\n", "unknown")
		return
	}

	var realHostOS string
	for glob, val := range globs {
		if match(glob, rawHostOS) {
			realHostOS = val
			break
		}
	}

	// No matches found, so apply the default heuristic.
	if realHostOS == "" {
		if match("[A-Za-z]*", rawHostOS) {
			realHostOS := strings.ToUpper(string(rawHostOS[0]))
			if len(rawHostOS) > 1 {
				realHostOS += rawHostOS[1:]
			}
		} else {
			realHostOS = rawHostOS
		}
	}

	fmt.Fprintf(file, "%q\n\n", realHostOS)
}
